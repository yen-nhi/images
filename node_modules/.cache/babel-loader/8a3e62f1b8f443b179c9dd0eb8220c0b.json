{"ast":null,"code":"import _slicedToArray from \"/home/nhi/react Images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/nhi/react Images/src/components/Canvas.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { classicNameResolver } from 'typescript';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\nimport classes from './Canvas.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Canvas = function Canvas() {\n  _s();\n\n  var canvas = useRef();\n  var box = useRef();\n  var ctx = null;\n  var currentBox = null;\n  var boxArray = [{\n    pos: {\n      x: 127,\n      y: 55,\n      w: 171,\n      h: 142\n    },\n    des: 'Iloveyou'\n  }];\n  var image = new Image();\n  image.src = catsImg;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      newDraw = _useState2[0],\n      _setNewDraw = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formPosition = _useState4[0],\n      setFormPosition = _useState4[1];\n\n  var drawBox = function drawBox(box) {\n    var borderColor = 'black';\n    var borderWidth = 1;\n    var _box$pos = box.pos,\n        x = _box$pos.x,\n        y = _box$pos.y,\n        w = _box$pos.w,\n        h = _box$pos.h;\n    ctx.beginPath();\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    ctx.rect(x, y, w, h);\n    ctx.stroke();\n    ctx.font = \"16px arial\";\n    ctx.strokeText(box.des, x, y - 5);\n  };\n\n  var drawBoxes = function drawBoxes() {\n    if (ctx !== null) {\n      ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);\n      ctx.drawImage(image, 0, 0);\n      boxArray.map(function (box) {\n        return drawBox(box);\n      });\n\n      if (currentBox !== null) {\n        drawBox(currentBox);\n      }\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(e) {\n    var x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    var y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n    currentBox = {\n      x: x,\n      y: y,\n      w: 30,\n      h: 30\n    };\n    drawBoxes();\n  };\n\n  var handleMouseUp = function handleMouseUp(e) {\n    if (currentBox !== null) {\n      console.log('Done!');\n      boxArray.push(currentBox);\n      setFormPosition(currentBox.x);\n\n      _setNewDraw(true);\n\n      currentBox = null;\n    }\n\n    drawBoxes();\n  };\n\n  var handleMouseOut = function handleMouseOut(e) {\n    currentBox = null;\n    drawBoxes();\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    if (currentBox !== null) {\n      var _currentBox = currentBox,\n          x = _currentBox.x,\n          y = _currentBox.y,\n          w = _currentBox.w,\n          h = _currentBox.h;\n      var mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      var mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {\n        x: x,\n        y: y,\n        w: mouseX - x,\n        h: mouseY - y\n      };\n      drawBoxes();\n    }\n  }; // initialize the canvas context\n\n\n  useEffect(function () {\n    // dynamically assign the width and height to canvas\n    var canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight; // get context of the canvas\n\n    ctx = canvasEle.getContext(\"2d\");\n  }, []);\n  useEffect(function () {\n    drawBoxes();\n    console.log(boxArray);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.page,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseOut: handleMouseOut,\n      onMouseMove: handleMouseMove,\n      ref: canvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, _this), newDraw && /*#__PURE__*/_jsxDEV(BoxForm, {\n      setNewDraw: function setNewDraw() {\n        return _setNewDraw(false);\n      },\n      x: formPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Canvas, \"40Aosu6EkCdBJ56IpXeACRXuzDw=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/nhi/react Images/src/components/Canvas.js"],"names":["React","useRef","useEffect","useState","classicNameResolver","catsImg","BoxForm","classes","Canvas","canvas","box","ctx","currentBox","boxArray","pos","x","y","w","h","des","image","Image","src","newDraw","setNewDraw","formPosition","setFormPosition","drawBox","borderColor","borderWidth","beginPath","strokeStyle","lineWidth","rect","stroke","font","strokeText","drawBoxes","clearRect","current","clientWidth","clientHeight","drawImage","map","handleMouseDown","e","parseInt","nativeEvent","offsetX","clientLeft","offsetY","clientTop","handleMouseUp","console","log","push","handleMouseOut","handleMouseMove","mouseX","mouseY","canvasEle","width","height","getContext","page"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA;;AACjB,MAAMC,MAAM,GAAGR,MAAM,EAArB;AACA,MAAMS,GAAG,GAAGT,MAAM,EAAlB;AACA,MAAIU,GAAG,GAAG,IAAV;AACA,MAAIC,UAAU,GAAI,IAAlB;AACA,MAAIC,QAAQ,GAAG,CAAC;AAACC,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,GAAJ;AAASC,MAAAA,CAAC,EAAE,EAAZ;AAAgBC,MAAAA,CAAC,EAAE,GAAnB;AAAwBC,MAAAA,CAAC,EAAE;AAA3B,KAAN;AAAuCC,IAAAA,GAAG,EAAE;AAA5C,GAAD,CAAf;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYjB,OAAZ;;AAEA,kBAA8BF,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOoB,OAAP;AAAA,MAAgBC,WAAhB;;AACA,mBAAwCrB,QAAQ,CAAC,CAAD,CAAhD;AAAA;AAAA,MAAOsB,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACjB,GAAD,EAAS;AACvB,QAAMkB,WAAW,GAAG,OAApB;AACA,QAAMC,WAAW,GAAG,CAApB;AACA,mBAAuBnB,GAAG,CAACI,GAA3B;AAAA,QAAQC,CAAR,YAAQA,CAAR;AAAA,QAAWC,CAAX,YAAWA,CAAX;AAAA,QAAcC,CAAd,YAAcA,CAAd;AAAA,QAAiBC,CAAjB,YAAiBA,CAAjB;AACAP,IAAAA,GAAG,CAACmB,SAAJ;AACAnB,IAAAA,GAAG,CAACoB,WAAJ,GAAkBH,WAAlB;AACAjB,IAAAA,GAAG,CAACqB,SAAJ,GAAgBH,WAAhB;AACAlB,IAAAA,GAAG,CAACsB,IAAJ,CAASlB,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;AACAP,IAAAA,GAAG,CAACuB,MAAJ;AACAvB,IAAAA,GAAG,CAACwB,IAAJ,GAAW,YAAX;AACAxB,IAAAA,GAAG,CAACyB,UAAJ,CAAe1B,GAAG,CAACS,GAAnB,EAAwBJ,CAAxB,EAA2BC,CAAC,GAAG,CAA/B;AACD,GAXD;;AAYA,MAAMqB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAI1B,GAAG,KAAK,IAAZ,EAAkB;AAChBA,MAAAA,GAAG,CAAC2B,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB7B,MAAM,CAAC8B,OAAP,CAAeC,WAAnC,EAAgD/B,MAAM,CAAC8B,OAAP,CAAeE,YAA/D;AACA9B,MAAAA,GAAG,CAAC+B,SAAJ,CAActB,KAAd,EAAqB,CAArB,EAAwB,CAAxB;AACAP,MAAAA,QAAQ,CAAC8B,GAAT,CAAa,UAAAjC,GAAG;AAAA,eAAIiB,OAAO,CAACjB,GAAD,CAAX;AAAA,OAAhB;;AACA,UAAIE,UAAU,KAAK,IAAnB,EAAyB;AACvBe,QAAAA,OAAO,CAACf,UAAD,CAAP;AACD;AACF;AACF,GATD;;AAWA,MAAMgC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,CAAC,EAAI;AAC3B,QAAM9B,CAAC,GAAG+B,QAAQ,CAACD,CAAC,CAACE,WAAF,CAAcC,OAAd,GAAwBvC,MAAM,CAAC8B,OAAP,CAAeU,UAAxC,CAAlB;AACA,QAAMjC,CAAC,GAAG8B,QAAQ,CAACD,CAAC,CAACE,WAAF,CAAcG,OAAd,GAAwBzC,MAAM,CAAC8B,OAAP,CAAeY,SAAxC,CAAlB;AACAvC,IAAAA,UAAU,GAAG;AAACG,MAAAA,CAAC,EAADA,CAAD;AAAIC,MAAAA,CAAC,EAADA,CAAJ;AAAOC,MAAAA,CAAC,EAAE,EAAV;AAAcC,MAAAA,CAAC,EAAE;AAAjB,KAAb;AACAmB,IAAAA,SAAS;AACV,GALD;;AAOA,MAAMe,aAAa,GAAG,SAAhBA,aAAgB,CAAAP,CAAC,EAAI;AACzB,QAAIjC,UAAU,KAAK,IAAnB,EAAyB;AACvByC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEAzC,MAAAA,QAAQ,CAAC0C,IAAT,CAAc3C,UAAd;AACAc,MAAAA,eAAe,CAACd,UAAU,CAACG,CAAZ,CAAf;;AACAS,MAAAA,WAAU,CAAC,IAAD,CAAV;;AACAZ,MAAAA,UAAU,GAAG,IAAb;AACD;;AACDyB,IAAAA,SAAS;AACV,GAVD;;AAYA,MAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAAAX,CAAC,EAAI;AAC1BjC,IAAAA,UAAU,GAAG,IAAb;AACAyB,IAAAA,SAAS;AACV,GAHD;;AAKA,MAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAAZ,CAAC,EAAI;AAC3B,QAAIjC,UAAU,KAAK,IAAnB,EAAyB;AACvB,wBAAuBA,UAAvB;AAAA,UAAQG,CAAR,eAAQA,CAAR;AAAA,UAAWC,CAAX,eAAWA,CAAX;AAAA,UAAcC,CAAd,eAAcA,CAAd;AAAA,UAAiBC,CAAjB,eAAiBA,CAAjB;AAEA,UAAMwC,MAAM,GAAGZ,QAAQ,CAACD,CAAC,CAACE,WAAF,CAAcC,OAAd,GAAwBvC,MAAM,CAAC8B,OAAP,CAAeU,UAAxC,CAAvB;AACA,UAAMU,MAAM,GAAGb,QAAQ,CAACD,CAAC,CAACE,WAAF,CAAcG,OAAd,GAAwBzC,MAAM,CAAC8B,OAAP,CAAeY,SAAxC,CAAvB;AACAvC,MAAAA,UAAU,GAAG;AAACG,QAAAA,CAAC,EAADA,CAAD;AAAIC,QAAAA,CAAC,EAADA,CAAJ;AAAOC,QAAAA,CAAC,EAAEyC,MAAM,GAAG3C,CAAnB;AAAsBG,QAAAA,CAAC,EAAEyC,MAAM,GAAG3C;AAAlC,OAAb;AACAqB,MAAAA,SAAS;AACV;AACF,GATD,CA3DiB,CAuEjB;;;AACAnC,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAM0D,SAAS,GAAGnD,MAAM,CAAC8B,OAAzB;AACAqB,IAAAA,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACpB,WAA5B;AACAoB,IAAAA,SAAS,CAACE,MAAV,GAAmBF,SAAS,CAACnB,YAA7B,CAJc,CAMd;;AACA9B,IAAAA,GAAG,GAAGiD,SAAS,CAACG,UAAV,CAAqB,IAArB,CAAN;AACD,GARQ,EAQN,EARM,CAAT;AAUA7D,EAAAA,SAAS,CAAC,YAAM;AACdmC,IAAAA,SAAS;AACTgB,IAAAA,OAAO,CAACC,GAAR,CAAYzC,QAAZ;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAEN,OAAO,CAACyD,IAAxB;AAAA,4BACE;AACE,MAAA,WAAW,EAAEpB,eADf;AAEE,MAAA,SAAS,EAAEQ,aAFb;AAGE,MAAA,UAAU,EAAEI,cAHd;AAIE,MAAA,WAAW,EAAEC,eAJf;AAKE,MAAA,GAAG,EAAEhD;AALP;AAAA;AAAA;AAAA;AAAA,aADF,EAQGc,OAAO,iBAAI,QAAC,OAAD;AACV,MAAA,UAAU,EAAE;AAAA,eAAMC,WAAU,CAAC,KAAD,CAAhB;AAAA,OADF;AAEV,MAAA,CAAC,EAAEC;AAFO;AAAA;AAAA;AAAA;AAAA,aARd;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CArGH;;GAAMjB,M;;KAAAA,M;AAuGJ,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { classicNameResolver } from 'typescript';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\nimport classes from './Canvas.module.css';\n\n\nconst Canvas = () => {\n    const canvas = useRef();\n    const box = useRef();\n    let ctx = null;\n    let currentBox =  null; \n    let boxArray = [{pos: {x: 127, y: 55, w: 171, h: 142}, des: 'Iloveyou'}];\n    let image = new Image();\n    image.src = catsImg;\n  \n    const [newDraw, setNewDraw] = useState(false);\n    const [formPosition, setFormPosition] = useState(0);\n\n    const drawBox = (box) => {\n      const borderColor = 'black';\n      const borderWidth = 1;\n      const { x, y, w, h } = box.pos;\n      ctx.beginPath();\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.rect(x, y, w, h);\n      ctx.stroke();\n      ctx.font = \"16px arial\";\n      ctx.strokeText(box.des, x, y - 5);\n    }\n    const drawBoxes = () => {\n      if (ctx !== null) {\n        ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);  \n        ctx.drawImage(image, 0, 0);\n        boxArray.map(box => drawBox(box));\n        if (currentBox !== null) {\n          drawBox(currentBox);\n        }     \n      }\n    }\n  \n    const handleMouseDown = e => {\n      const x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      const y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {x, y, w: 30, h: 30};\n      drawBoxes();\n    }  \n  \n    const handleMouseUp = e => {\n      if (currentBox !== null) {\n        console.log('Done!')\n\n        boxArray.push(currentBox);\n        setFormPosition(currentBox.x);\n        setNewDraw(true);\n        currentBox = null;\n      }\n      drawBoxes();\n    }  \n  \n    const handleMouseOut = e => {      \n      currentBox = null\n      drawBoxes();\n    }\n  \n    const handleMouseMove = e => {\n      if (currentBox !== null) {\n        const { x, y, w, h } = currentBox;\n  \n        const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n        const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n        currentBox = {x, y, w: mouseX - x, h: mouseY - y};\n        drawBoxes();\n      }\n    }\n  \n  \n    // initialize the canvas context\n    useEffect(() => {\n      // dynamically assign the width and height to canvas\n      const canvasEle = canvas.current;\n      canvasEle.width = canvasEle.clientWidth;\n      canvasEle.height = canvasEle.clientHeight;\n   \n      // get context of the canvas\n      ctx = canvasEle.getContext(\"2d\");\n    }, []);\n  \n    useEffect(() => {   \n      drawBoxes();\n      console.log(boxArray);\n    }, []);\n  \n    return (\n      <div className={classes.page}>\n        <canvas\n          onMouseDown={handleMouseDown} \n          onMouseUp={handleMouseUp}\n          onMouseOut={handleMouseOut}\n          onMouseMove={handleMouseMove}\n          ref={canvas}> \n        </canvas>\n        {newDraw && <BoxForm \n          setNewDraw={() => setNewDraw(false)}\n          x={formPosition}/>}\n      </div>\n    );\n  }\n  \n  export default Canvas;"]},"metadata":{},"sourceType":"module"}