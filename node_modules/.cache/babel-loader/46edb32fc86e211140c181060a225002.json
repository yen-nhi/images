{"ast":null,"code":"import _toConsumableArray from \"/home/nhi/react Images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/home/nhi/react Images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/home/nhi/react Images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/nhi/react Images/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import catsImg from '../images/cats.jpg';\n// import BoxForm from \"./BoxForm\";\n// import classes from './Canvas.module.css';\n// const Canvas = () => {\n//     const canvas = useRef();\n//     const box = useRef();\n//     let ctx = null;\n//     let currentBox =  null; \n//     let image = new Image();\n//     image.src = catsImg;\n//     const [newDraw, setNewDraw] = useState(false);\n//     const [formPosition, setFormPosition] = useState(0);\n//     const [boxesArr, setBoxesArr] = useState([]);\n//     fetch('https://images-4bdb1-default-rtdb.asia-southeast1.firebasedatabase.app/images.json')\n//     .then(res => res.json)\n//     .then(data => {\n//       setBoxesArr(data)\n//     });\n//     const drawBox = (box) => {\n//       const borderColor = 'black';\n//       const borderWidth = 1;\n//       const { x, y, w, h } = box;\n//       ctx.beginPath();\n//       ctx.strokeStyle = borderColor;\n//       ctx.lineWidth = borderWidth;\n//       ctx.rect(x, y, w, h);\n//       ctx.stroke();\n//       ctx.font = \"16px arial\";\n//       ctx.strokeText('hello', x, y - 5);\n//     }\n//     const drawBoxes = () => {\n//       if (ctx !== null) {\n//         ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);  \n//         ctx.drawImage(image, 0, 0);\n//         boxesArr.map(box => drawBox(box));\n//         if (currentBox !== null) {\n//           drawBox(currentBox);\n//         }     \n//       }\n//     }\n//     const handleMouseDown = e => {\n//       const x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n//       const y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n//       currentBox = {x, y, w: 30, h: 30};\n//       drawBoxes();\n//     }  \n//     const handleMouseUp = e => {\n//       if (currentBox !== null) {\n//         console.log('Done!')\n//         setNewDraw(true);\n//         currentBox = null;\n//       }\n//       drawBoxes();\n//     }  \n//     const handleMouseOut = e => {      \n//       currentBox = null;\n//       drawBoxes();\n//     }\n//     const handleMouseMove = e => {\n//       if (currentBox !== null) {\n//         const { x, y, w, h } = currentBox;\n//         const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n//         const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n//         currentBox = {x, y, w: mouseX - x, h: mouseY - y};\n//         drawBoxes();\n//       }\n//     }\n//     // initialize the canvas context\n//     useEffect(() => {\n//       // dynamically assign the width and height to canvas\n//       const canvasEle = canvas.current;\n//       canvasEle.width = canvasEle.clientWidth;\n//       canvasEle.height = canvasEle.clientHeight;\n//       // get context of the canvas\n//       ctx = canvasEle.getContext(\"2d\");\n//     }, []);\n//     useEffect(() => {   \n//       drawBoxes();\n//       console.log(boxesArr);\n//     }, []);\n//     return (\n//       <div className={classes.page}>\n//         <canvas\n//           onMouseDown={handleMouseDown} \n//           onMouseUp={handleMouseUp}\n//           onMouseOut={handleMouseOut}\n//           onMouseMove={handleMouseMove}\n//           ref={canvas}> \n//         </canvas>\n//         {newDraw && <BoxForm \n//           setNewDraw={() => setNewDraw(false)}\n//           x={formPosition}/>}\n//       </div>\n//     );\n//   }\n//   export default Canvas;\nimport classes from './Canvas.module.css';\nimport React, { useRef, useEffect, useState } from 'react';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvas() {\n  _s();\n\n  var canvas = useRef();\n  var currentBox = null;\n  var image = new Image(60, 45);\n  image.src = catsImg;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      boxes = _useState2[0],\n      setBoxes = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newDraw = _useState4[0],\n      _setNewDraw = _useState4[1];\n\n  var _useState5 = useState({\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      coordinate = _useState6[0],\n      setCoordinate = _useState6[1];\n\n  var drawBox = function drawBox(ctx, box) {\n    var x = box.x,\n        y = box.y,\n        w = box.w,\n        h = box.h;\n    ctx.beginPath();\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 1;\n    ctx.rect(x, y, w, h);\n    ctx.stroke();\n    ctx.strokeText(x, x, y);\n  };\n\n  var drawBoxes = function drawBoxes() {\n    var canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight;\n    var ctx = canvasEle.getContext(\"2d\");\n\n    if (ctx !== null) {\n      ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);\n      ctx.drawImage(image, 0, 0);\n\n      var _iterator = _createForOfIteratorHelper(boxes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var box = _step.value;\n          drawBox(ctx, box);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (currentBox !== null) {\n        drawBox(ctx, currentBox);\n      }\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(e) {\n    var x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    var y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n    currentBox = {\n      x: x,\n      y: y,\n      w: 30,\n      h: 30\n    };\n    drawBoxes();\n  };\n\n  var handleMouseUp = function handleMouseUp(e) {\n    if (currentBox !== null) {\n      setBoxes([].concat(_toConsumableArray(boxes), [currentBox]));\n      setFormPosition(currentBox.x);\n\n      _setNewDraw(true);\n\n      currentBox = null;\n    }\n\n    drawBoxes();\n  };\n\n  var handleMouseOut = function handleMouseOut(e) {\n    currentBox = null;\n    drawBoxes();\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    if (currentBox !== null) {\n      var _currentBox = currentBox,\n          x = _currentBox.x,\n          y = _currentBox.y,\n          w = _currentBox.w,\n          h = _currentBox.h;\n      var mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      var mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {\n        x: x,\n        y: y,\n        w: mouseX - x,\n        h: mouseY - y\n      };\n      drawBoxes();\n    }\n  }; // initialize the canvas context\n\n\n  useEffect(function () {// dynamically assign the width and height to canvas\n  }, []);\n  useEffect(function () {\n    drawBoxes();\n  }, [boxes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.page,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseDown: handleMouseDown,\n        onMouseUp: handleMouseUp,\n        onMouseOut: handleMouseOut,\n        onMouseMove: handleMouseMove,\n        ref: canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), newDraw && /*#__PURE__*/_jsxDEV(BoxForm, {\n        setNewDraw: function setNewDraw() {\n          return _setNewDraw(false);\n        },\n        x: formPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Canvas, \"2AuxjUC4eZ/vOpQmYwg4Ei4Y9Us=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/nhi/react Images/src/components/Canvas.js"],"names":["classes","React","useRef","useEffect","useState","catsImg","BoxForm","Canvas","canvas","currentBox","image","Image","src","boxes","setBoxes","newDraw","setNewDraw","x","y","w","h","coordinate","setCoordinate","drawBox","ctx","box","beginPath","strokeStyle","lineWidth","rect","stroke","strokeText","drawBoxes","canvasEle","current","width","clientWidth","height","clientHeight","getContext","clearRect","drawImage","handleMouseDown","e","parseInt","nativeEvent","offsetX","clientLeft","offsetY","clientTop","handleMouseUp","setFormPosition","handleMouseOut","handleMouseMove","mouseX","mouseY","page","formPosition"],"mappings":"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","sourcesContent":["// import React, { useRef, useEffect, useState } from 'react';\n// import catsImg from '../images/cats.jpg';\n// import BoxForm from \"./BoxForm\";\n// import classes from './Canvas.module.css';\n\n\n// const Canvas = () => {\n//     const canvas = useRef();\n//     const box = useRef();\n//     let ctx = null;\n//     let currentBox =  null; \n//     let image = new Image();\n//     image.src = catsImg;\n  \n//     const [newDraw, setNewDraw] = useState(false);\n//     const [formPosition, setFormPosition] = useState(0);\n//     const [boxesArr, setBoxesArr] = useState([]);\n\n//     fetch('https://images-4bdb1-default-rtdb.asia-southeast1.firebasedatabase.app/images.json')\n//     .then(res => res.json)\n//     .then(data => {\n//       setBoxesArr(data)\n//     });\n\n//     const drawBox = (box) => {\n//       const borderColor = 'black';\n//       const borderWidth = 1;\n//       const { x, y, w, h } = box;\n//       ctx.beginPath();\n//       ctx.strokeStyle = borderColor;\n//       ctx.lineWidth = borderWidth;\n//       ctx.rect(x, y, w, h);\n//       ctx.stroke();\n//       ctx.font = \"16px arial\";\n//       ctx.strokeText('hello', x, y - 5);\n//     }\n//     const drawBoxes = () => {\n//       if (ctx !== null) {\n//         ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);  \n//         ctx.drawImage(image, 0, 0);\n//         boxesArr.map(box => drawBox(box));\n//         if (currentBox !== null) {\n//           drawBox(currentBox);\n//         }     \n//       }\n//     }\n  \n//     const handleMouseDown = e => {\n//       const x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n//       const y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n//       currentBox = {x, y, w: 30, h: 30};\n//       drawBoxes();\n//     }  \n  \n//     const handleMouseUp = e => {\n//       if (currentBox !== null) {\n//         console.log('Done!')\n//         setNewDraw(true);\n//         currentBox = null;\n//       }\n//       drawBoxes();\n//     }  \n  \n//     const handleMouseOut = e => {      \n//       currentBox = null;\n//       drawBoxes();\n//     }\n  \n//     const handleMouseMove = e => {\n//       if (currentBox !== null) {\n//         const { x, y, w, h } = currentBox;\n  \n//         const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n//         const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n//         currentBox = {x, y, w: mouseX - x, h: mouseY - y};\n//         drawBoxes();\n//       }\n//     }\n  \n  \n//     // initialize the canvas context\n//     useEffect(() => {\n//       // dynamically assign the width and height to canvas\n//       const canvasEle = canvas.current;\n//       canvasEle.width = canvasEle.clientWidth;\n//       canvasEle.height = canvasEle.clientHeight;\n   \n//       // get context of the canvas\n//       ctx = canvasEle.getContext(\"2d\");\n//     }, []);\n  \n//     useEffect(() => {   \n//       drawBoxes();\n//       console.log(boxesArr);\n//     }, []);\n  \n//     return (\n//       <div className={classes.page}>\n//         <canvas\n//           onMouseDown={handleMouseDown} \n//           onMouseUp={handleMouseUp}\n//           onMouseOut={handleMouseOut}\n//           onMouseMove={handleMouseMove}\n//           ref={canvas}> \n//         </canvas>\n//         {newDraw && <BoxForm \n//           setNewDraw={() => setNewDraw(false)}\n//           x={formPosition}/>}\n//       </div>\n//     );\n//   }\n  \n//   export default Canvas;\n\nimport classes from './Canvas.module.css';\nimport React, { useRef, useEffect, useState } from 'react';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\n\nexport default function Canvas() {\n  const canvas = useRef();\n  let currentBox =  null; \n  let image = new Image(60, 45);\n  image.src = catsImg;\n  const [boxes, setBoxes] = useState([]);\n  const [newDraw, setNewDraw] = useState(false);\n  const [coordinate, setCoordinate] = useState({x: 0, y: 0, w: 0, h: 0});\n  \n  const drawBox = (ctx, box) => {\n    const { x, y, w, h } = box;\n    ctx.beginPath();\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 1;\n    ctx.rect(x, y, w, h);\n    ctx.stroke();\n    ctx.strokeText(x, x, y);\n  }\n\n  const drawBoxes = () => {\n    const canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight;\n    let ctx = canvasEle.getContext(\"2d\");\n\n    if (ctx !== null) {\n      ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);  \n      ctx.drawImage(image, 0, 0);\n      for (let box of boxes) {\n        drawBox(ctx, box);\n      }\n      if (currentBox !== null) {\n        drawBox(ctx, currentBox);\n      }     \n    }\n  }\n\n  const handleMouseDown = e => {\n    const x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    const y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n    currentBox = {x, y, w: 30, h: 30};\n    drawBoxes();\n  }  \n\n  const handleMouseUp = e => {\n    if (currentBox !== null) {\n      setBoxes([...boxes, currentBox]);\n      setFormPosition(currentBox.x)\n      setNewDraw(true);\n      currentBox = null;\n    }\n    drawBoxes();\n  }  \n\n  const handleMouseOut = e => {\n    currentBox = null\n    drawBoxes();\n  }\n\n  const handleMouseMove = e => {\n    if (currentBox !== null) {\n      const { x, y, w, h } = currentBox;\n      const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {x, y, w: mouseX - x, h: mouseY - y};\n      drawBoxes();\n    }\n  }\n\n\n  // initialize the canvas context\n  useEffect(() => {\n    // dynamically assign the width and height to canvas\n  }, []);\n\n  useEffect(() => {   \n    drawBoxes();\n  }, [boxes]);\n\n  return (\n    <div className={classes.page}>\n      <div>\n        <canvas \n          onMouseDown={handleMouseDown} \n          onMouseUp={handleMouseUp}\n          onMouseOut={handleMouseOut}\n          onMouseMove={handleMouseMove}\n          ref={canvas}>    \n        </canvas>\n        {newDraw && <BoxForm \n          setNewDraw={() => setNewDraw(false)}\n          x={formPosition}\n          />}\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}