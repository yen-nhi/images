{"ast":null,"code":"import _slicedToArray from \"/home/nhi/react Images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/nhi/react Images/src/components/Canvas.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { classicNameResolver } from 'typescript';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\nimport classes from './Canvas.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Canvas = function Canvas() {\n  _s();\n\n  var canvas = useRef();\n  var box = useRef();\n  var ctx = null;\n  var currentBox = null;\n  var boxArray = [{\n    x: 127,\n    y: 55,\n    w: 171,\n    h: 142\n  }];\n  var image = new Image();\n  image.src = catsImg;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      newDraw = _useState2[0],\n      _setNewDraw = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      x = _useState4[0],\n      setX = _useState4[1];\n\n  var drawBox = function drawBox(box) {\n    var borderColor = 'black';\n    var borderWidth = 1;\n    var x = box.x,\n        y = box.y,\n        w = box.w,\n        h = box.h;\n    ctx.beginPath();\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    ctx.rect(x, y, w, h);\n    ctx.stroke();\n    ctx.font = \"16px arial\";\n    ctx.strokeText(\"Hello World\", x, y - 5);\n  };\n\n  var drawBoxes = function drawBoxes() {\n    if (ctx !== null) {\n      ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);\n      ctx.drawImage(image, 0, 0);\n      boxArray.map(function (box) {\n        return drawBox(box);\n      });\n\n      if (currentBox !== null) {\n        drawBox(currentBox);\n      }\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(e) {\n    var x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    var y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n    currentBox = {\n      x: x,\n      y: y,\n      w: 30,\n      h: 30\n    };\n    drawBoxes();\n  };\n\n  var handleMouseUp = function handleMouseUp(e) {\n    if (currentBox !== null) {\n      boxArray.push(currentBox);\n      console.log(currentBox);\n      setX(currentBox);\n      currentBox = null;\n    }\n\n    drawBoxes();\n  };\n\n  var handleMouseOut = function handleMouseOut(e) {\n    console.log('Done!');\n\n    _setNewDraw(true);\n\n    currentBox = null;\n    drawBoxes();\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    if (currentBox !== null) {\n      var _currentBox = currentBox,\n          _x = _currentBox.x,\n          y = _currentBox.y,\n          w = _currentBox.w,\n          h = _currentBox.h;\n      var mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      var mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {\n        x: _x,\n        y: y,\n        w: mouseX - _x,\n        h: mouseY - y\n      };\n      drawBoxes();\n    }\n  }; // initialize the canvas context\n\n\n  useEffect(function () {\n    // dynamically assign the width and height to canvas\n    var canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight; // get context of the canvas\n\n    ctx = canvasEle.getContext(\"2d\");\n  }, []);\n  useEffect(function () {\n    drawBoxes();\n    console.log(boxArray);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.page,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseOut: handleMouseOut,\n      onMouseMove: handleMouseMove,\n      ref: canvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, _this), newDraw && /*#__PURE__*/_jsxDEV(BoxForm, {\n      setNewDraw: function setNewDraw() {\n        return _setNewDraw(false);\n      },\n      x: x\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Canvas, \"KabaV3o8ljKN2XTZs9h8/VmUsCk=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/nhi/react Images/src/components/Canvas.js"],"names":["React","useRef","useEffect","useState","classicNameResolver","catsImg","BoxForm","classes","Canvas","canvas","box","ctx","currentBox","boxArray","x","y","w","h","image","Image","src","newDraw","setNewDraw","setX","drawBox","borderColor","borderWidth","beginPath","strokeStyle","lineWidth","rect","stroke","font","strokeText","drawBoxes","clearRect","current","clientWidth","clientHeight","drawImage","map","handleMouseDown","e","parseInt","nativeEvent","offsetX","clientLeft","offsetY","clientTop","handleMouseUp","push","console","log","handleMouseOut","handleMouseMove","mouseX","mouseY","canvasEle","width","height","getContext","page"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { classicNameResolver } from 'typescript';\nimport catsImg from '../images/cats.jpg';\nimport BoxForm from \"./BoxForm\";\nimport classes from './Canvas.module.css';\n\n\nconst Canvas = () => {\n    const canvas = useRef();\n    const box = useRef();\n    let ctx = null;\n    let currentBox =  null; \n    let boxArray = [{x: 127, y: 55, w: 171, h: 142}];\n    let image = new Image();\n    image.src = catsImg;\n  \n    const [newDraw, setNewDraw] = useState(false);\n    const [x, setX] = useState(0);\n\n    const drawBox = (box) => {\n      const borderColor = 'black';\n      const borderWidth = 1;\n      const { x, y, w, h } = box;\n      ctx.beginPath();\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.rect(x, y, w, h);\n      ctx.stroke();\n      ctx.font = \"16px arial\";\n      ctx.strokeText(\"Hello World\", x, y - 5);\n    }\n    const drawBoxes = () => {\n      if (ctx !== null) {\n        ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);  \n        ctx.drawImage(image, 0, 0);\n        boxArray.map(box => drawBox(box));\n        if (currentBox !== null) {\n          drawBox(currentBox);\n        }     \n      }\n    }\n  \n    const handleMouseDown = e => {\n      const x = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n      const y = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n      currentBox = {x, y, w: 30, h: 30};\n      drawBoxes();\n    }  \n  \n    const handleMouseUp = e => {\n      if (currentBox !== null) {\n        boxArray.push(currentBox);\n        console.log(currentBox);\n        setX(currentBox);\n        currentBox = null;\n      }\n      drawBoxes();\n    }  \n  \n    const handleMouseOut = e => {\n      console.log('Done!')\n      setNewDraw(true);\n      currentBox = null\n      drawBoxes();\n      \n    }\n  \n    const handleMouseMove = e => {\n      if (currentBox !== null) {\n        const { x, y, w, h } = currentBox;\n  \n        const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n        const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n        currentBox = {x, y, w: mouseX - x, h: mouseY - y};\n        drawBoxes();\n      }\n    }\n  \n  \n    // initialize the canvas context\n    useEffect(() => {\n      // dynamically assign the width and height to canvas\n      const canvasEle = canvas.current;\n      canvasEle.width = canvasEle.clientWidth;\n      canvasEle.height = canvasEle.clientHeight;\n   \n      // get context of the canvas\n      ctx = canvasEle.getContext(\"2d\");\n    }, []);\n  \n    useEffect(() => {   \n      drawBoxes();\n      console.log(boxArray);\n    }, []);\n  \n    return (\n      <div className={classes.page}>\n        <canvas\n          onMouseDown={handleMouseDown} \n          onMouseUp={handleMouseUp}\n          onMouseOut={handleMouseOut}\n          onMouseMove={handleMouseMove}\n          ref={canvas}> \n        </canvas>\n        {newDraw && <BoxForm \n          setNewDraw={() => setNewDraw(false)}\n          x={x}/>}\n      </div>\n    );\n  }\n  \n  export default Canvas;"]},"metadata":{},"sourceType":"module"}